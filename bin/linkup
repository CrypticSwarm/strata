#!/usr/bin/env node

var fs = require("fs"),
    path = require("path"),
    link = require("link");

var addr,
    cert,
    appfile = path.resolve("./app.js"),
    key,
    port = 1982,
    socket;

var exit = false,
    arg;

for (var i = 2; i < process.argv.length; ++i) {
    if (exit) {
        break;
    }

    arg = process.argv[i];

    function nextArg() {
        var next = process.argv[++i];
        if (!next) {
            printUsage();
            exit = true;
        }
        return next;
    }

    switch (arg) {
    case "-a":
    case "--address":
        addr = nextArg();
        break;
    case "-c":
    case "--cert":
        cert = nextArg();
        break;
    case "-h":
    case "--help":
        printUsage();
        exit = true;
        break;
    case "-k":
    case "--key":
        key = nextArg();
        break;
    case "-p":
    case "--port":
        port = nextArg();
        break;
    case "-s":
    case "--socket":
        socket = nextArg();
        break;
    case "-v":
    case "--version":
        console.log(link.version.join("."));
        exit = true;
        break;
    default:
        appfile = path.resolve(arg);
    }
}

if (!exit) {
    if (path.existsSync(appfile)) {
        var ext = path.extname(appfile);
        var file = appfile.substring(0, appfile.length - ext.length);
        var app = require(file);

        var options;
        if (key && cert) {
            options = {
                key: fs.readFileSync(key),
                cert: fs.readFileSync(cert)
            };
        }

        var server = link.createServer(app, options);

        if (socket) {
            server.listen(socket, function () {
                var a = server.address();
                console.log("Link server started at %s", a.address);
            })
        } else {
            server.listen(port, addr, function () {
                var a = server.address();
                console.log("Link server started at %s:%s", a.address, a.port);
            });
        }
    } else {
        throw new link.Error("File " + appfile + " does not exist");
    }
}

function printUsage() {
    var s = [];

    s.push("linkup v. " + link.version.join("."));
    s.push("Usage: linkup [options] [appfile]");
    s.push("");
    s.push("  Starts the Link application contained in the given appfile. If");
    s.push("  none is given, will use the file at $PWD/app.js.");
    s.push("");
    s.push("Options:");
    s.push("  -a, --address   The address to bind to (defaults to 0.0.0.0)");
    s.push("  -c, --cert      The name of the public key certificate file");
    s.push("                  (HTTPS only)");
    s.push("  -h, --help      Show this help message and exit");
    s.push("  -k, --key       The name of the private key file (HTTPS only)");
    s.push("  -p, --port      The port number to listen on (defaults to 1982)");
    s.push("  -s, --socket    The unix socket to listen to. If this is given");
    s.push("                  the -a and -p options are ignored.");
    s.push("  -v, --version   Show the current version of Link and exit");

    console.log(s.join("\n"));
}
